// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FinanceAction {
  EARN
  CONVERT
}
enum Region {
  AFRICA
  EUROPE
}

enum UserRole {
  ADMIN
  USER
  PREMIUM
  GUEST
}

enum Difficulty {
  GUEST
  EASY
  MEDIUM
  HARD
}

enum Provider {
  GOOGLE
  PASSWORD
  PHONE
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  username  String @unique
  email     String   @unique
  password String
  phoneNumber String? @unique 
  isPremium Boolean @default(false)
  isVerified Boolean @default(false)
  region Region  
  role UserRole @default(USER)
  level Int @default(0)
  points Int @default(0)
  coins Decimal  @db.Decimal(10,2) @default(0.00)
  usdt Int @default(0)
  streak Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authProviders  AuthProvider[]  
  wallet Wallet?
  question Question[]
  transactions Transaction[]
}

model Wallet {
  walletId String @id @default(uuid()) @db.Uuid
  walletAddress String @unique
  userId String @unique @db.Uuid
  user User @relation(fields: [userId], references: [id])
}

model Question {
  id Int @id @default(autoincrement())
  category String 
  region String[]
  prompt String 
  answer String
  options String[] @default([])
  difficulty Difficulty[] @default([EASY])
  authorId String? @db.Uuid
  author User? @relation(fields: [authorId], references: [id])
}



model AuthProvider {
  id    String   @id @default(uuid()) @db.Uuid
  provider  Provider 
  providerId String?
  userId    String  @db.Uuid
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
}


model Transaction {
  id        Int      @id @default(autoincrement())
  userId    String @db.Uuid
  type      FinanceAction  
  amount    Float
  details   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}